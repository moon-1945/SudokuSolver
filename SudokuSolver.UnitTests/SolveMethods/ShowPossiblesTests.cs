using FluentAssertions;
using NUnit.Framework;
using SudokuSolver.SolveMethods.BasicStrategies;
using SudokuSolver.Sudoku;
using System.Text.Json;

namespace SudokuSolver.UnitTests.SolveMethods;

public class ShowPossiblesTests
{
    [TestCase(/*lang=json*/"""
    [
        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],


        [[ 1, 2, 3 ], [ 1, 2, 3, ], [          ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [   -2     ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [          ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [          ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [   -8     ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [          ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],


        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
    ]
    """,
    /*lang=json*/"""
    [
        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1,    3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7,    9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1,    3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7,    9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1,    3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7,    9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],


        [[ 1,    3 ], [ 1,    3, ], [          ],    [ 1,    3, ], [ 1,    3, ], [ 1,    3, ],    [ 1,    3, ], [ 1,    3, ], [ 1,    3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [   -2     ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7,    9 ], [ 7,    9, ], [          ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1,    3 ], [ 1,    3, ], [ 1,    3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7,    9 ], [ 7,    9, ], [ 7,    9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1,    3 ], [ 1,    3, ], [          ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [   -8     ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7,    9 ], [ 7,    9, ], [          ],    [ 7,    9, ], [ 7,    9, ], [ 7,    9, ],    [ 7,    9, ], [ 7,    9, ], [ 7,    9, ]],


        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1,    3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7,    9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1,    3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7,    9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1,    3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7,    9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
    ]
    """)]
    public void TrySolve_WhenPassedUnsimplifiedSudoku_SimplifiesCorrectly(string gridData, string expectedGridData)
    {
        SudokuBase s = Parse(gridData);
        SudokuBase expected = Parse(expectedGridData);

        bool res = new ShowPossibles().TrySolve(s);

        Assert.IsTrue(res);
        s.Rows.Should().BeEquivalentTo(expected.Rows);
        s.Columns.Should().BeEquivalentTo(expected.Columns);
        s.Squares.Should().BeEquivalentTo(expected.Squares);
    }

    private SudokuBase Parse(string gridString)
    {
        int[][][] grid = JsonSerializer.Deserialize<int[][][]>(gridString, new JsonSerializerOptions() { AllowTrailingCommas = true })!;
        return new OldSudoku(grid);
    }
}