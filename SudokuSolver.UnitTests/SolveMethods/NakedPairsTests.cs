using FluentAssertions;
using NUnit.Framework;
using SudokuSolver.SolveMethods.NakedGroups;
using System.Text.Json;

namespace SudokuSolver.UnitTests.SolveMethods;

public class NakedPairsTests
{
    [TestCase(/*lang=json*/"""
    [
        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],


        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[       3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4,      ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[         ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[       3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4,      ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[         ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],


        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    ]
    """,
    /*lang=json*/"""
    [
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
    
        [[ 1, 2,   ], [ 1, 2,    ], [ 1, 2,    ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [    5, 6, ], [    5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[       3 ], [ 1, 2,    ], [ 1, 2,    ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4,      ], [    5, 6, ], [    5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[         ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[       3 ], [ 1, 2,    ], [ 1, 2,    ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4,      ], [    5, 6, ], [    5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[         ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    ]
    """)]
    public void TrySolve_WhenPassedSudoku_WorksCorrectly(string gridData, string expectedGridData)
    {
        Sudoku s = Parse(gridData);
        Sudoku expected = Parse(expectedGridData);

        bool res = new NakedPairs().TrySolve(s);

        //Assert.IsTrue(res);
        s.Rows.Should().BeEquivalentTo(expected.Rows);
        s.Columns.Should().BeEquivalentTo(expected.Columns);
        s.Squares.Should().BeEquivalentTo(expected.Squares);
    }

    [TestCase(/*lang=json*/"""
    [
        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],


        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[       3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4,      ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[         ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],


        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[       3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4,      ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[         ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],

        [[ 1, 2, 3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4, 5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    ]
    """,
    /*lang=json*/"""
    [
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[       3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4,      ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[         ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[       3 ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[ 4,      ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[         ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    
        [[ 1, 2,   ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ],    [ 1, 2, 3, ], [ 1, 2, 3, ], [ 1, 2, 3, ]],
        [[    5, 6 ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ],    [ 4, 5, 6, ], [ 4, 5, 6, ], [ 4, 5, 6, ]],
        [[ 7, 8, 9 ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ],    [ 7, 8, 9, ], [ 7, 8, 9, ], [ 7, 8, 9, ]],
    ]
    """)]
    public void TrySolve_WhenPassedSudoku_WorksCorrectly2(string gridData, string expectedGridData)
    {
        Sudoku s = Parse(gridData);
        Sudoku expected = Parse(expectedGridData);

        bool res = new NakedPairs().TrySolve(s);

        //Assert.IsTrue(res);
        s.Rows.Should().BeEquivalentTo(expected.Rows);
        s.Columns.Should().BeEquivalentTo(expected.Columns);
        s.Squares.Should().BeEquivalentTo(expected.Squares);
    }

    private Sudoku Parse(string gridString)
    {
        int[][][] grid = JsonSerializer.Deserialize<int[][][]>(gridString, new JsonSerializerOptions() { AllowTrailingCommas = true })!;
        return new(grid);
    }
}